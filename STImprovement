function [ETA, XMASSFLOW, DATEN, DATEX, DAT, MASSFLOW, COMBUSTION, FIG] = ST(P_e,options,display)
% ST Steam power plants modelisation
% ST(P_e,options,display) compute the thermodynamics states for a Steam
% power plant (combustion, exchanger, cycle) turbine based on several 
% inputs (given in OPTION) and based on a given electricity production P_e.
% It returns the main results. It can as well plots graphs if input 
% argument DISPLAY = true (<=> DISPLAY=1)
%
% INPUTS (some inputs can be dependent on others => only one of these 2 can
%         be activated)
% P_E = electrical power output target [kW]
% OPTIONS is a structure containing :
%   -options.nsout     [-] : Number of feed-heating 
%   -options.reheat    [-] : Number of reheating
%   -options.T_max     [?C] : Maximum steam temperature
%   -options.T_cond_out[?C] : Condenseur cold outlet temperature
%   -options.p3_hp     [bar] : Maximum pressure
%   -options.drumFlag  [-] : if =1 then drum if =0 => no drum. 
%   -options.eta_mec   [-] : mecanic efficiency of shafts bearings
%   -options.comb is a structure containing combustion data : 
%       -comb.Tmax     [?C] : maximum combustion temperature
%       -comb.lambda   [-] : air excess
%       -comb.x        [-] : the ratio O_x/C. Example 0.05 in CH_1.2O_0.05
%       -comb.y        [-] : the ratio H_y/C. Example 1.2 in CH_1.2O_0.05
%   -options.T_exhaust [?C] : Temperature of exhaust gas out of the chimney
%   -options.p_3       [-] : High pressure after last reheating
%   -options.x4        [-] : Vapor ratio [gaseous/liquid] (in french : titre)
%   -options.T_0       [?C] : Reference temperature
%   -options.TpinchSub [?C] : Temperature pinch at the subcooler
%   -options.TpinchEx  [?C] : Temperature pinch at a heat exchanger
%   -options.TpinchCond[?C] : Temperature pinch at condenser 
%   -options.Tdrum     [?C] : minimal drum temperature
%   -option.eta_SiC    [-] : Isotrenpic efficiency for compression
%   -option.eta_SiT    [-] : Isotrenpic efficiency for Turbine. It can be a vector of 2 values :
%             	             eta_SiT(1)=eta_SiT_HP,eta_SiT(2)=eta_SiT_others
% DISPLAY = 1 or 0. If 1, then the code should plot graphics. If 0, then 
%          do not plot.
%
%OUPUTS : 
% ETA is a vector with :
%   -eta(1) : eta_cyclen, cycle energy efficiency
%   -eta(2) : eta_toten, overall energy efficiency
%   -eta(3) : eta_cyclex, cycle exegy efficiency
%   -eta(4) : eta_totex, overall exergie efficiency
%   -eta(5) : eta_gen, Steam generator energy efficiency
%   -eta(6) : eta_gex, Steam generator exergy efficiency
%   -eta(7) : eta_combex, Combustion exergy efficiency
%   -eta(8) : eta_chemex, Chimney exergy efficiency (losses)
%   -eta(9) : eta_transex, Heat exchanger overall exergy efficiency
%   FYI : eta(i) \in [0;1] [-]
% Xmassflow is a vector with each feedheating massflow [kg/s] (respect to figure 
%           2.33, page 91 "Thermal Power Plants" English version).
%           Xmassflow(1) = mass flow at 6_1 etc...
% DATEN is a vector with : 
%   -daten(1) : perte_gen [kW]
%   -daten(2) : perte_mec [kW]
%   -daten(3) : perte_cond [kW]
% DATEX is a vector with :
%   -datex(1) : perte_mec    [kW]
%   -datex(2) : perte_totex  [kW]
%   -datex(3) : perte_rotex  [kW]
%   -datex(4) : perte_combex [kW]
%   -datex(5) : perte_condex [kW]
%   -datex(6) : perte_chemex [kW]
%   -datex(7) : perte_transex[kW]
% DAT is a matrix containing :
% dat = {T_1       , T_2       , ...       , T_6_I,     T_6_II, ... ;  [?C]
%        p_1       , p_2       , ...       , p_6_I,     p_6_II, ... ;  [bar]
%        h_1       , h_2       , ...       , h_6_I,     h_6_II, ... ;  [kJ/kg]
%        s_1       , s_2       , ...       , s_6_I,     s_6_II, ... ;  [kJ/kg/K]
%        e_1       , e_2       , ...       , e_6_I,     e_6_II, ... ;  [kJ/kg]
%        x_1       , x_2       , ...       , x_6_I,     x_6_II, ... ;   };[-]
% MASSFLOW is a vector containing : 
%   -massflow(1) = m_a, air massflow [kg/s]
%   -massflow(2) = m_v, water massflow at 2 [kg/s]
%   -massflow(3) = m_c, combustible massflow [kg/s] 
%   -massflow(4) = m_f, exhaust gas massflow [kg/s]
% 
% COMBUSTION is a structure with :
%   -combustion.LHV    : the Lower Heat Value of the fuel [kJ/kg]
%   -combustion.e_c    : the combustible exergie         [kJ/kg]
%   -combustion.lambda : the air excess                   [-]
%   -combustion.Cp_g   : heat capacity of exhaust gas     [kJ/kg/K]
%   -combustion.fum  : is a vector of the exhaust gas composition :
%       -fum(1) = m_O2f  : massflow of O2 in exhaust gas [kg/s]
%       -fum(2) = m_N2f  : massflow of N2 in exhaust gas [kg/s]
%       -fum(3) = m_CO2f : massflow of CO2 in exhaust gas [kg/s]
%       -fum(4) = m_H2Of : massflow of H2O in exhaust gas [kg/s] 
%
% FIG is a vector of all the figure you plot. Before each figure, define a
% figure environment such as:  
%  "FIG(1) = figure;
%  plot(x,y1);
%  [...]
%   FIG(2) = figure;
%  plot(x,y2);
%  [...]"
%  Your vector FIG will contain all the figure plot during the run of this
%  code (whatever the size of FIG).

%% Conditions initiales
close all;

if nargin<3
    display = 1;
    if nargin<2
        options = struct('nsout',8,'reheat',0,'T_max',525,'T_cond_out',30,'p3_hp',200, ...
            'drumFlag',1,'eta_mec',0.98  ... %,'comb',struct('Tmax',1200,'x',0,'y',4) ...
            ,'T_exhaust',120,'x4',0.89,'T_0',15,'TpinchSub',4,'TpinchEx',15, ...
            'TpinchCond',15,'Tdrum',120,'eta_SiC',0.9,'eta_SiT',[0.9 0.9]);
        if nargin<1
            P_e = 225e3; % [kW] Puissance energetique de l'installation
        end
    end
end


% Importation des options

for d = 1 %Useless loop to fold up initial conditions
    if isfield(options,'nsout')
        nsout = options.nsout;
    else
        nsout = 8;  % [-]
    end
    if isfield(options,'reheat')
        reheat = options.reheat;
    else
        reheat = 0;  % [-]
    end
    if isfield(options,'T_max')
        T_max = options.T_max;
    else
        T_max = 525;  % [C]
    end
    if isfield(options,'p3_hp')
        p3_hp = options.p3_hp;
    else
        p3_hp = 200;  % [bar]
    end
    if isfield(options,'drumFlag')
        drumFlag = options.drumFlag;
    else
        drumFlag = 1;  % [-]
    end
    if isfield(options,'eta_mec')
        eta_mec = options.eta_mec;
    else
        eta_mec = 0.98;  % [-]
    end
    if isfield(options,'comb')
        if isfield(options.comb,'Tmax')
            comb_Tmax = options.comb.Tmax;
        else
            comb_Tmax = 1400;  % p.111
        end
        if isfield(options.comb,'x')
            comb_x = options.comb.x;
        else
            comb_x = 0;  % [O/C]
        end
        if isfield(options.comb,'y')
            comb_y = options.comb.y;
        else
            comb_y = 4;  % [H/C]
        end
        if isfield(options,'T_exhaust')
            T_exhaust = options.T_exhaust;
        else
            T_exhaust = 120;  % [C]
        end
    else
        comb_Tmax = 1400;
        comb_x = 0;
        comb_y = 4;
        T_exhaust = 120;
    end
    if isfield(options,'p_3')
        p3 = options.p_3;
    else
        switch reheat
            case 1
                p3 = 0.14*p3_hp; % Livre p85 : rapport optimal
            case 0
                p3 = 0; % Pas de resurchauffe
            case 2
                p3 = sqrt(0.14)*p3_hp; 
            otherwise
                error('A maximum of 2 reheats are allowed.');
        end
    end
    if isfield(options,'x4')
        x4 = options.x4;
    else
        x4 = 0.89;  % [-]
    end
    if isfield(options,'T_0')
        T_0 = options.T_0;
    else
        T_0 = 15.0;  % [C]
    end

    if isfield(options,'TpinchSub')
        TpinchSub = options.TpinchSub;
    else
        TpinchSub = 4.0;  % [C]
    end
    if isfield(options,'TpinchEx')
        TpinchEx = options.TpinchEx;
    else
        TpinchEx = 10.0;  % [C]
    end
    if isfield(options,'TpinchSub')
        TpinchCond = options.TpinchCond;
    else
        TpinchCond = 15.0;  % [C]
    end
    if isfield(options,'Tdrum')
        Tdrum = options.Tdrum;
    else
        Tdrum = 120.0;  % [C]
    end
    if isfield(options,'eta_SiC')
        eta_SiC = options.eta_SiC;
    else
        eta_SiC = 0.9;  % [-]
    end
    if isfield(options,'eta_SiT')
        if isvector(options.eta_SiT)
            eta_SiT(1) = options.eta_SiT(1);
            eta_SiT(2) = options.eta_SiT(2);
        else
            eta_SiT(1) = options.eta_SiT;
            eta_SiT(2) = options.eta_SiT;
        end
    else
        eta_SiT = [0.9 0.9]; % [/]
    end
    if isfield(options,'T_cond_out')
        T_cond_out = options.T_cond_out;
    else
        T_cond_out = TpinchCond + T_0;  % [C]
    end
end

%% Partie 1 : ch. comb. -> sortie turb. BP -> sortie condenseur

% Vecteurs des etats pour le passage dans les turbines
% L1 : avant Pompe alimentaire
% L2 : apres Pa
% L3 : entree HP
% L4 : sortie HP
% L5 : entree MP apres resurchauffe
% L6 : sortie BP
% L7 : sortie condenseur
% L8 : sortie de pompe Pe
% L9 : sortie de bache
% L10 : post pompe Pb
p = zeros(1,10); % [p,t,x,s,h,e]
t = zeros(1,10);
x = zeros(1,10); % x = NaN si vapeur surchauffe ou liquide sous-refroidi 
s = zeros(1,10);
h = zeros(1,10);
e = zeros(1,10);


% Initialisation des vecteurs avec les donnees initiales
t(3) = T_max;
x(7) = 0;
t(7) = T_cond_out;
p(7) = XSteam('psat_T',t(7));
p(6) = p(7);

%     ------------------------ ON NE CONNAIT PAS ENCORE L'ETAT AVANT LA
%     TURBINE, ON VEUT LE DEDUIRE DEPUIS L'ETAT APRES LA DETENTE DE LA
%     TURBINE ---------------------------------------------------------
% 

%     % Calcul Etat 3
%     p(3) = p3_hp;
%     h(3) = XSteam('h_pT',p(3),t(3));
%     s(3) = XSteam('s_pT',p(3),t(3));
%     x(3) = XSteam('x_ph',p(3),h(3));
%     e(3) = Exergie(h(3),s(3));

% RESURCHAUFFE
if reheat >= 1
    % Calcul Etat 4    
    p(4) = p3;
    [t(4), h(4), s(4),~,~,~] = detenteTurb(t(3),p(3),h(3),s(3),p(4),eta_SiT(1));
    s4s = s(3);
    h4s = XSteam('h_ps',p(4),s4s);
    h(4) = h(3) - eta_SiT(1)*(h(3) - h4s);
    t(4) = XSteam('T_ph',p(4),h(4));
    s(4) = XSteam('s_ph',p(4),h(4));
    x(4) = XSteam('x_ph',p(4),h(4));
    e(4) = Exergie(h(4),s(4));
    p(5) = p(4);
    
    if reheat == 2
        % premiere resurchauffe sur 2
        t3_2 = T_max;
        p3_2 = p(4);
        h3_2 = XSteam('h_pT',p3_2,t3_2);
        s3_2 = XSteam('s_pT',p3_2,t3_2);
        x3_2 = XSteam('x_ph',p3_2,h3_2);
        e3_2 = Exergie(h3_2,s3_2);
        
        % deuxieme detente        
        p4_2 = sqrt(0.14)*p3;
        [t4_2, h4_2, s4_2,~,~,~] = detenteTurb(t3_2,p3_2,h3_2,s3_2,p4_2,eta_SiT(2));
        x4_2 = XSteam('x_ph',p4_2,h4_2);
        e4_2 = Exergie(h4_2,s4_2);
        
        p(5) = p4_2;
    end
    
    % Resurchauffe classique ou 2eme resurchauffe
    t(5) = T_max;
    h(5) = XSteam('h_pT',p(5),t(5));
    s(5) = XSteam('s_ph',p(5),h(5));
    x(5) = XSteam('x_ph',p(5),h(5));        
    e(5) = Exergie(h(5),s(5));
elseif reheat == 0
%     
%     % On zappe les etats 4 et 5
%     p([4 5]) = [NaN p(3)];
%     t([4 5]) = [NaN t(3)];
%     x([4 5]) = [NaN x(3)];
%     s([4 5]) = [NaN s(3)];
%     h([4 5]) = [NaN h(3)];
%     e([4 5]) = [NaN e(3)];


% SORTIE DE TURBINE BP
% Calcul Etat 6
% 
%     [t(6), h(6), s(6),~,~,~] = detenteTurb(t(5),p(5),h(5),s(5),p(6),eta_SiT(2));
%     x(6) = XSteam('x_ph',p(6),h(6));
% 
%     % Verification du titre
%     if (abs(x(6) - 1) <= 1e-4)  || (x(6) < 0.88) || (x(6) < x4)
%         disp(['ATTENTION : solution actuelle non-valable car x_sortie_turbine = ', num2str(x(6),3) ,' avec les configurations actuelles.']) 
%     end
%     while (abs(x(6) - 1) <= 1e-4)  || (x(6) < 0.88) || (x(6) < x4)
%         eta_SiT(2) = eta_SiT(2)-0.005;
%         [t(6), h(6), s(6),~,~,~] = detenteTurb(t(5),p(5),h(5),s(5),p(6),eta_SiT(2));
%         x(6) = XSteam('x_ph',p(6),h(6));
%     end
%     disp(['Nouveau rendement isentr. de la turbine MP et BP : ',num2str(eta_SiT(2))])
%     e(6) = Exergie(h(6),s(6));





end



%On veut partir de cette info pour retrouver la pression de départ de la détente
x6 = 0.88; 
t6 = T_0+TpinchCond;
h6 = XSteam('h_pt',p(6),t6);    
s6 = XSteam('s_ph',p(6),h6);
p6 = XSteam('p_hs',h6,s6);
% ENTREE DE TURBINE
%   Calcul de l'état 3

%t3 = t(3);
Vec = fsolve(@detenteTurb,[t6, p6, h6, s6, 10*p6 , eta_SiT(1)]) 



% SORTIE DE CONDENSEUR
% Calcul Etat 7 - p,t,x connus - etat liquide
s(7) = XSteam('sL_T',t(7));
h(7) = XSteam('hL_T',t(7));
e(7) = Exergie(h(7),s(7));
    
%% Soutirages 
    STATES = [t;p;h;s;x;e];
    if reheat == 2
        REHEAT = [t4_2;p4_2;h4_2;s4_2;x4_2;e4_2];
    else
        REHEAT = [];
    end
    if nsout > 0
        [STATES,tbleed,pbleed,hbleed,sbleed,xbleed,ebleed,DAT9,Xflow,bache,DHbleed,DHRES] = Soutirages(STATES,options,eta_SiT,REHEAT);
        t9 = DAT9(:,1);
        p9 = DAT9(:,2);
        h9 = DAT9(:,3);
        s9 = DAT9(:,4);
        x9 = DAT9(:,5);
        e9 = DAT9(:,6);
    else
        [STATES,~,~,~,~,~,~,~,Xflow,bache,~,~] = Soutirages(STATES,options,eta_SiT,REHEAT);
    end
    t = STATES(1,:);
    p = STATES(2,:);
    h = STATES(3,:);
    s = STATES(4,:);
    x = STATES(5,:);
    e = STATES(6,:);    
    b = bache;
    n = nsout;

%% Debit de l'installation

if nsout > 0
    switch reheat
        case 0
        Turb = h(5)-h(6) + Xflow(nsout)*(hbleed(1,nsout)-h(6)) + ...
                (h(5)-hbleed(1,2))*sum(Xflow);
        eTurb = e(5)-e(6) + Xflow(nsout)*(ebleed(1,nsout)-e(6)) + ...
                (e(5)-ebleed(1,2))*sum(Xflow);
        case 1
        Turb = h(5)-h(6) + Xflow(nsout)*(hbleed(1,nsout)-h(6)) + ...
                (h(3)-h(4))*(1+sum(Xflow)) + (h(5)-hbleed(1,2))*sum(Xflow(2:nsout));
        eTurb = e(5)-e(6) + Xflow(nsout)*(ebleed(1,nsout)-e(6)) + ...
                (e(3)-e(4))*(1+sum(Xflow)) + (e(5)-ebleed(1,2))*sum(Xflow(2:nsout));
        case 2
        Turb = (h(3)-h(4))*(1+sum(Xflow)) + (h3_2-h4_2)*(1+sum(Xflow(2:nsout))) + ...
                h(5)-h(6) + Xflow(nsout)*(hbleed(1,nsout)-h(6)) + (h(5)-hbleed(1,2))*sum(Xflow(3:nsout));
        eTurb = (e(3)-e(4))*(1+sum(Xflow)) + (e3_2-e4_2)*(1+sum(Xflow(2:nsout))) + ...
                e(5)-e(6) + Xflow(nsout)*(ebleed(1,nsout)-e(6)) + (e(5)-ebleed(1,2))*sum(Xflow(3:nsout));
    end

    for i=(1+reheat):nsout-1
        Turb = Turb + (hbleed(1,i)-hbleed(1,i+1))*sum(Xflow(i:nsout));
        eTurb = eTurb + (ebleed(1,i)-ebleed(1,i+1))*sum(Xflow(i:nsout));
    end
    P_Pa = (h(2)-h(1))*(1+sum(Xflow));
    P_Pe = (h(8)-h(7))*(1+sum(Xflow(bache+1:nsout)));
    P_Pb = (h(10)-h(9))*(1+sum(Xflow));
    e_Pa = (e(2)-e(1))*(1+sum(Xflow));
    e_Pe = (e(8)-e(7))*(1+sum(Xflow(bache+1:nsout)));
    e_Pb = (e(10)-e(9))*(1+sum(Xflow));
else
    switch reheat
        case 0
        Turb = (h(5)-h(6));
        eTurb = (e(5)-e(6));
        case 1
        Turb = (h(3)-h(4)) + (h(5)-h(6));
        eTurb = (e(3)-e(4)) + (e(5)-e(6));
        case 2
        Turb = (h(3)-h(4)) + (h3_2-h4_2) + (h(5)-h(6));
        eTurb = (e(3)-e(4)) + (e3_2-e4_2) + (e(5)-e(6));
    end

    P_Pa = (h(2)-h(1));
    P_Pe = 0;
    P_Pb = 0;
    e_Pa = (e(2)-e(1));
    e_Pe = 0;
    e_Pb = 0;
end
Pumps = P_Pa + P_Pe + P_Pb;
ePumps = e_Pa + e_Pe + e_Pb;
Wm = Turb - Pumps;
m_cond = P_e/(Wm*eta_mec);
m_tot = m_cond*(1+sum(Xflow));
MASSFLOW(2) = m_tot;
XMASSFLOW = m_cond*Xflow;

%% CHAMBRE DE COMBUSTION
    
    T0K = 273.15;
    comb_Tmax = comb_Tmax + T0K;
    T_exhaust = T_exhaust + T0K;
    T0 = T_0 + T0K;
    Tin = T_exhaust - TpinchEx; % Temperature d'entree de l'air dans la chambre
    
    %Tair_vec = linspace(T0,Tin);
    h_a = Cpa(T0,Tin)*(Tin-T0);
    s_a = Cpa(T0,Tin)*log(Tin/T0);
    %s_a = trapz(Tair_vec,Cpa(Tair_vec)/Tair_vec); % VARIATION NEGLIGEABLE
    e_r = h_a-T0*s_a;
    
    % Pouvoir Comburivore
    m_a1 = ((32 + 3.76*28)*(1+(comb_y-2*comb_x)/4)) / (12 + comb_y + 16*comb_x);    
    %Combustible
    [e_c, PCI]= LHV(comb_y,comb_x);
    
    % On importe lambda OU on le trouve en fonction de la temperature
    % maximale possible dans la chambre de combustion
    if isfield(options,'comb')
        if isfield(options.comb,'lambda')
            comb_lambda = options.comb.lambda;
        else
            comb_lambda = fsolve(@lambdaAppropriate,1.2,optimset('display','off'));
        end
    else
        comb_lambda = fsolve(@lambdaAppropriate,1.2,optimset('display','off'));
    end

    %Evaluation de la composition des fum?es
    [mass_O2f, mass_CO2f, mass_N2f, mass_H2Of] = ComputeMassFraction(comb_lambda,comb_x,comb_y);
    MassFr = [mass_O2f mass_CO2f mass_N2f mass_H2Of];

    h_exhaust = Cpg(MassFr,T0,T_exhaust)*(T_exhaust-T0);
    s_exhaust = CpgMoyen(MassFr,T_exhaust,T0)*log(T_exhaust/T0); 
    % Prends en compte l'enthalpie de l'air portee a plus haute temperature
    e_f = (PCI+comb_lambda*m_a1*h_a)/(comb_lambda*m_a1+1) - ... 
        CpgMoyen(MassFr,comb_Tmax,T0)*T0*log(1 + (PCI+comb_lambda*m_a1*h_a)/(((comb_lambda*m_a1+1))*T0*Cpg(MassFr,T0,comb_Tmax)));
    e_exh = h_exhaust - T0*s_exhaust;
    
    
    % MATRICE pour resolution des debits massiques
    % Var = [m_a m_c m_g]'
    VECTEUR = zeros(3,1);
    switch reheat
        case 0
            VECTEUR(1) = m_tot*(h(3)-h(2));
        case 1
            VECTEUR(1) = m_tot*(h(3)-h(2)) + (m_tot-XMASSFLOW(1))*(h(5)-h(4));
        case 2
            VECTEUR(1) = m_tot*(h(3)-h(2)) + (m_tot-XMASSFLOW(1))*(h3_2-h4_2) + ...
                    (m_tot-sum(XMASSFLOW(1:2)))*(h(5)-h(4));
    end

     MATRICE = [-h_a    PCI                   -h_exhaust; ...
               -1      -1                  1 ; ...
                1      -comb_lambda*m_a1   0];
    VECTEUR(2:3) = [0;0];
    m_comb = MATRICE\VECTEUR;
    m_a = m_comb(1); m_c = m_comb(2); m_g = m_comb(3);
    
    %Vecteur MASSFLOW
    MASSFLOW(1) = m_a;
    MASSFLOW(3) = m_c;
    MASSFLOW(4) = m_g;
    
    %Vecteur combustion.fum
    COMBUSTION.fum(1) = mass_O2f*m_g;
    COMBUSTION.fum(2) = mass_N2f*m_g;
    COMBUSTION.fum(3) = mass_CO2f*m_g;
    COMBUSTION.fum(4) = mass_H2Of*m_g;
        
    %Structure Combustion
    COMBUSTION.LHV = PCI;
    COMBUSTION.e_c = e_c;
    COMBUSTION.lambda = comb_lambda;
    COMBUSTION.Cp_g = Cpg(MassFr,T_exhaust);
    
    
%% RENDEMENTS
% Flux primaire
Pprim_en = m_c*PCI;
Pprim_ex = m_c*e_c;

if reheat == 0
    Qcomb = m_tot*(h(3)-h(2));
    eQcomb = m_tot*(e(3)-e(2));
elseif reheat == 1
    Qcomb = m_tot*(h(3)-h(2)) + (m_tot-XMASSFLOW(1))*(h(5)-h(4));
    eQcomb = m_tot*(e(3)-e(2)) + (m_tot-XMASSFLOW(1))*(e(5)-e(4));
else
    Qcomb = m_tot*(h(3)-h(2)) + (m_tot-XMASSFLOW(1))*(h3_2-h4_2) + (m_tot-sum(XMASSFLOW(1:2)))*(h(5)-h(4));
    eQcomb = m_tot*(e(3)-e(2)) + (m_tot-XMASSFLOW(1))*(e3_2-e4_2) + (m_tot-sum(XMASSFLOW(1:2)))*(e(5)-e(4));
end
if nsout > 0
    if drumFlag == 1
        delta_e_liq = (m_tot*sum(e9(1:b-1)) + m_cond*sum(e9(b:nsout+1)));
        delta_e_sout = (m_cond*(DHbleed*Xflow + sum(DHRES*Xflow) + sum(Xflow(b+1:n))*(ebleed(3,nsout)-ebleed(4,nsout))));    
    else
        delta_e_liq = (m_tot*sum(e9) + m_cond*sum(e9));
        delta_e_sout = (m_cond*(DHbleed*Xflow + sum(DHRES*Xflow) + sum(Xflow)*(ebleed(3,nsout)-ebleed(4,nsout))));    
    end
else
    delta_e_liq = 1;
    delta_e_sout = 0;
end

% Energie
eta_gen = (Qcomb)/(Pprim_en);
eta_cyclen = (Wm*m_cond)/(Qcomb);
eta_toten = eta_mec*eta_gen*eta_cyclen;    

% Exergie            
eta_combex = (e_f-e_r)*m_g/(Pprim_ex);
eta_chemnex = (e_f - e_exh)/(e_f-e_r);
eta_transexGEN = eQcomb/(m_g*(e_f-e_exh));
eta_transexSOUT = delta_e_liq / delta_e_sout;
eta_transex = eta_transexSOUT*eta_transexGEN;
eta_gex = eta_transex*eta_chemnex*eta_combex;
eta_cyclex = m_cond*Wm/eQcomb;

eta_totex = P_e/Pprim_ex;
%% Pertes

% Energie
kmec = 1/eta_mec - 1;
Pgen = h_exhaust*m_g;
Pcyclen = m_cond*(h(6)-h(7));

% Exergie
eta_pex = (ePumps) / (Pumps);
eta_tex = (Turb) / (eTurb);
Protex = (1-eta_pex)*(Pumps)*m_cond + (1-eta_tex)*(Turb)*m_cond;
Pcyclex = (e(6)-e(7))*m_cond;
Pmec = (Pumps + Turb)*m_cond*kmec;
Pcombex = m_c*e_c - m_g*e_f;
Pchemnex = e_exh*m_g;
Ptransex = (m_g*(e_f-e_exh)) - eQcomb + (delta_e_sout-delta_e_liq);
Ptotex = Pprim_ex - P_e;

%% OUTPUT
ETA = [eta_cyclen eta_toten eta_cyclex eta_totex eta_gen eta_gex eta_combex eta_chemnex eta_transex];
DATEN = [Pgen Pmec Pcyclen];
DATEX = [Pmec Ptotex Protex Pcombex Pcyclex Pchemnex Ptransex];
XMASSFLOW = flipud(XMASSFLOW);
% DAT = [T;p;h;s;x;e]
switch reheat
    case 0
        matrice_reheat = [t(1:2) t(5) ; p(1:2) p(5) ; h(1:2) h(5) ; ...
                            s(1:2) s(5) ; x(1:2) x(5) ; e(1:2) e(5)];
    case 1
        matrice_reheat = [t(1:5) ; p(1:5) ; h(1:5) ; s(1:5) ; x(1:5) ; e(1:5)];
    case 2
        matrice_reheat = [t(1:4) t3_2 t4_2 t(5) ; p(1:4) p3_2 p4_2 p(5) ; ...
                        h(1:4) h3_2 h4_2 h(5) ; s(1:4) s3_2 s4_2 s(5) ; ...
                        x(1:4) x3_2 x4_2 x(5) ; e(1:4) e3_2 e4_2 e(5) ; ];
end
if nsout == 0    
    matrice_sout = [t(6:7);p(6:7);h(6:7);s(6:7);x(6:7);e(6:7)];
    matrice_liq = [];
else
    matrice_sout = [t(6) fliplr(tbleed(1,:)) t(7) t(8) ; p(6) fliplr(pbleed(1,:)) p(7) p(8) ; ...
        h(6) fliplr(hbleed(1,:)) h(7) h(8) ; s(6) fliplr(sbleed(1,:)) s(7) s(8) ; ...
        x(6) fliplr(xbleed(1,:)) x(7) x(8) ; e(6) fliplr(ebleed(1,:)) e(7) e(8)];
    matrice_liq = [fliplr(t9(2:nsout)') ; fliplr(p9(2:nsout)') ; fliplr(h9(2:nsout)') ; ...
        fliplr(s9(2:nsout)') ; fliplr(x9(2:nsout)') ; fliplr(e9(2:nsout)')];
end
DAT = [matrice_reheat matrice_sout matrice_liq];

%% DISPLAY
if display ==1
    DATVEC = [t;p;h;s];
    if nsout > 0
        DAT9 = [t9 h9 s9];
    else
        DAT9 = []; tbleed = []; pbleed = []; hbleed = []; sbleed = [];
    end
    if reheat == 2
        REHEAT = [[t3_2;p3_2;h3_2;s3_2;0;0] REHEAT];
    else
        REHEAT = [];
    end
    FIG = DrawST(DAT,options,eta_SiT,tbleed,pbleed,hbleed,sbleed,DAT9,DATVEC,REHEAT);
        
    % Pie charts
    FIG(3) = figure; % Energie
    legends = {sprintf('Pertes au g?n?rateur \n de vapeur %.1f MW',Pgen/1000), ...
        sprintf('Pertes au condenseur \n %.1f MW',Pcyclen/1000), ...
        sprintf('Pertes m?caniques \n %.1f MW',Pmec/1000), ...
        sprintf('Puissance effective \n %.1f MW',P_e/1000)};
    pie([Pgen Pcyclen Pmec P_e],legends);
    title('Flux d''?nergie de l''installation vapeur');
    
    FIG(4) = figure; % Exergie
    legends = {sprintf('Pertes au condenseur \n %.1f MW',Pcyclex/1000), ...
        sprintf('Irr?versibilit? de la combustion \n %.1f MW',Pcombex/1000),...
        sprintf('Pertes m?caniques \n %.1f MW',Pmec/1000), ...
        sprintf('Irr?versibilit?s turb. et compr. \n %.1f MW',Protex/1000)...
        sprintf('Irr?versibilit?s transf. de chaleur \n %.1f MW',Ptransex/1000), ...
        sprintf('Pertes ? la chemin?e \n %.1f MW',Pchemnex/1000), ...
        sprintf('Puissance effective \n %.1f MW',P_e/1000)};
    pie([Pcyclex Pcombex Pmec Protex Ptransex Pchemnex P_e],legends);  
    title('Flux d''exergie de l''installation vapeur');
else
    FIG = [];
end


% Trouve le coefficient d'exces d'air adequat a la temperature maximale de
% la chambre de combustion et au combustible.
% renvoie une fonction a utiliser avec fsolve.
% p 115 eq 3.9
function f = lambdaAppropriate(L)
   [mass_O2f, mass_CO2f, mass_N2f, mass_H2Of] =  ComputeMassFraction(L,comb_x,comb_y);
   MassFr = [mass_O2f mass_CO2f mass_N2f mass_H2Of];
   Cpgas = Cpg(MassFr,comb_Tmax,T0);
   hf0 = Cpg(MassFr,T0+273.15)*(T0-T0K);
   f = 1+( PCI + L*m_a1*h_a )/( (L*m_a1+1)*Cpgas*T0 ) - hf0/(Cpgas*T0) - comb_Tmax/T0;
   %f = Cpgas*(comb_Tmax-T0)+(1/(L*m_a1))*(Cpgas*(comb_Tmax-T0)-PCI);
end


%Retourne le PCI d'un combustible du type CH_yO_x selon les donn?es
%disponibles dans des tables issues du cours LMECA2160 - Combustion and
%fuels.
% OUTPUT : - LHV : PCI du carburant exprim? en [kJ/kg]
%          - e_c : exergie du combustible en [kJ/kg]
function [e_c, LHV] = LHV(y,x)
    
    % Valeurs LHV en kJ/kmol
    LHV_CO = 282400;
    LHV_CH4 = 802400;
    LHV_C = 393400;
    LHV_H2Ovap = 241800;
    
    % LMECA2160 eq (4.87)
    a = x/(1+y/2); % ecriture
    LHV = a*LHV_CO + a*(y/2)*LHV_H2Ovap + (1-a)*((1-y/4)*LHV_C + (y/4)*LHV_CH4);
    Mmol_combustible = 12+y*1+x*16; % [kg/kmol]
    LHV = LHV/Mmol_combustible;
    
    e_c = 1.04*LHV; % "Element de thermodynamique technique", P.Wauters.
end

% Retourne l'exergie POUR L'EAU a un etat donne comme une difference avec 
% INPUT =  - h : enthalpie de l'etat [kJ/kg]
%          - s : entropie de l'etat [kJ/kg]
%          - T0 : temperature de reference 
% OUTPUT = - e : exergie de l'etat [kJ/kg], comparee a l'exergie ? T_0 ?C
function e = Exergie(h , s)
    h_0= XSteam('hL_T',T_0);
    s_0= XSteam('sL_T',T_0);
    e = (h-h_0) - (273.15+T_0)*(s-s_0); 
end

end


